function [encounter_id,patient_nbr,race,gender,age,weight,admission_type_id,discharge_disposition_id,admission_source_id,time_in_hospital,payer_code,medical_specialty,num_lab_procedures,num_procedures,num_medications,number_outpatient,number_emergency,number_inpatient,diag_1,diag_2,diag_3,number_diagnoses,max_glu_serum,A1Cresult,metformin,repaglinide,nateglinide,chlorpropamide,glimepiride,acetohexamide,glipizide,glyburide,tolbutamide,pioglitazone,rosiglitazone,acarbose,miglitol,troglitazone,tolazamide,examide,citoglipton,insulin,glyburidemetformin,glipizidemetformin,glimepiridepioglitazone,metforminrosiglitazone,metforminpioglitazone,change,diabetesMed,readmitted] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [ENCOUNTER_ID,PATIENT_NBR,RACE,GENDER,AGE,WEIGHT,ADMISSION_TYPE_ID,DISCHARGE_DISPOSITION_ID,ADMISSION_SOURCE_ID,TIME_IN_HOSPITAL,PAYER_CODE,MEDICAL_SPECIALTY,NUM_LAB_PROCEDURES,NUM_PROCEDURES,NUM_MEDICATIONS,NUMBER_OUTPATIENT,NUMBER_EMERGENCY,NUMBER_INPATIENT,DIAG_1,DIAG_2,DIAG_3,NUMBER_DIAGNOSES,MAX_GLU_SERUM,A1CRESULT,METFORMIN,REPAGLINIDE,NATEGLINIDE,CHLORPROPAMIDE,GLIMEPIRIDE,ACETOHEXAMIDE,GLIPIZIDE,GLYBURIDE,TOLBUTAMIDE,PIOGLITAZONE,ROSIGLITAZONE,ACARBOSE,MIGLITOL,TROGLITAZONE,TOLAZAMIDE,EXAMIDE,CITOGLIPTON,INSULIN,GLYBURIDEMETFORMIN,GLIPIZIDEMETFORMIN,GLIMEPIRIDEPIOGLITAZONE,METFORMINROSIGLITAZONE,METFORMINPIOGLITAZONE,CHANGE,DIABETESMED,READMITTED]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [ENCOUNTER_ID,PATIENT_NBR,RACE,GENDER,AGE,WEIGHT,ADMISSION_TYPE_ID,DISCHARGE_DISPOSITION_ID,ADMISSION_SOURCE_ID,TIME_IN_HOSPITAL,PAYER_CODE,MEDICAL_SPECIALTY,NUM_LAB_PROCEDURES,NUM_PROCEDURES,NUM_MEDICATIONS,NUMBER_OUTPATIENT,NUMBER_EMERGENCY,NUMBER_INPATIENT,DIAG_1,DIAG_2,DIAG_3,NUMBER_DIAGNOSES,MAX_GLU_SERUM,A1CRESULT,METFORMIN,REPAGLINIDE,NATEGLINIDE,CHLORPROPAMIDE,GLIMEPIRIDE,ACETOHEXAMIDE,GLIPIZIDE,GLYBURIDE,TOLBUTAMIDE,PIOGLITAZONE,ROSIGLITAZONE,ACARBOSE,MIGLITOL,TROGLITAZONE,TOLAZAMIDE,EXAMIDE,CITOGLIPTON,INSULIN,GLYBURIDEMETFORMIN,GLIPIZIDEMETFORMIN,GLIMEPIRIDEPIOGLITAZONE,METFORMINROSIGLITAZONE,METFORMINPIOGLITAZONE,CHANGE,DIABETESMED,READMITTED]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [encounter_id,patient_nbr,race,gender,age,weight,admission_type_id,discharge_disposition_id,admission_source_id,time_in_hospital,payer_code,medical_specialty,num_lab_procedures,num_procedures,num_medications,number_outpatient,number_emergency,number_inpatient,diag_1,diag_2,diag_3,number_diagnoses,max_glu_serum,A1Cresult,metformin,repaglinide,nateglinide,chlorpropamide,glimepiride,acetohexamide,glipizide,glyburide,tolbutamide,pioglitazone,rosiglitazone,acarbose,miglitol,troglitazone,tolazamide,examide,citoglipton,insulin,glyburidemetformin,glipizidemetformin,glimepiridepioglitazone,metforminrosiglitazone,metforminpioglitazone,change,diabetesMed,readmitted] = importfile('diabetic_data.csv',2, 101767);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/04/06 20:35:22

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,7,8,9,10,13,14,15,16,17,18,19,20,21,22]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,7,8,9,10,13,14,15,16,17,18,22]);
rawCellColumns = raw(:, [3,4,5,6,11,12,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
encounter_id = cell2mat(rawNumericColumns(:, 1));
patient_nbr = cell2mat(rawNumericColumns(:, 2));
race = rawCellColumns(:, 1);
gender = rawCellColumns(:, 2);
age = rawCellColumns(:, 3);
weight = rawCellColumns(:, 4);
admission_type_id = cell2mat(rawNumericColumns(:, 3));
discharge_disposition_id = cell2mat(rawNumericColumns(:, 4));
admission_source_id = cell2mat(rawNumericColumns(:, 5));
time_in_hospital = cell2mat(rawNumericColumns(:, 6));
payer_code = rawCellColumns(:, 5);
medical_specialty = rawCellColumns(:, 6);
num_lab_procedures = cell2mat(rawNumericColumns(:, 7));
num_procedures = cell2mat(rawNumericColumns(:, 8));
num_medications = cell2mat(rawNumericColumns(:, 9));
number_outpatient = cell2mat(rawNumericColumns(:, 10));
number_emergency = cell2mat(rawNumericColumns(:, 11));
number_inpatient = cell2mat(rawNumericColumns(:, 12));
diag_1 = rawCellColumns(:, 7);
diag_2 = rawCellColumns(:, 8);
diag_3 = rawCellColumns(:, 9);
number_diagnoses = cell2mat(rawNumericColumns(:, 13));
max_glu_serum = rawCellColumns(:, 10);
A1Cresult = rawCellColumns(:, 11);
metformin = rawCellColumns(:, 12);
repaglinide = rawCellColumns(:, 13);
nateglinide = rawCellColumns(:, 14);
chlorpropamide = rawCellColumns(:, 15);
glimepiride = rawCellColumns(:, 16);
acetohexamide = rawCellColumns(:, 17);
glipizide = rawCellColumns(:, 18);
glyburide = rawCellColumns(:, 19);
tolbutamide = rawCellColumns(:, 20);
pioglitazone = rawCellColumns(:, 21);
rosiglitazone = rawCellColumns(:, 22);
acarbose = rawCellColumns(:, 23);
miglitol = rawCellColumns(:, 24);
troglitazone = rawCellColumns(:, 25);
tolazamide = rawCellColumns(:, 26);
examide = rawCellColumns(:, 27);
citoglipton = rawCellColumns(:, 28);
insulin = rawCellColumns(:, 29);
glyburidemetformin = rawCellColumns(:, 30);
glipizidemetformin = rawCellColumns(:, 31);
glimepiridepioglitazone = rawCellColumns(:, 32);
metforminrosiglitazone = rawCellColumns(:, 33);
metforminpioglitazone = rawCellColumns(:, 34);
change = rawCellColumns(:, 35);
diabetesMed = rawCellColumns(:, 36);
readmitted = rawCellColumns(:, 37);


